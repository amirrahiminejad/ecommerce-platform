# File Upload Configuration Examples

# Add these configurations to your application.properties or application.yml

# ==========================================
# FILE UPLOAD SETTINGS
# ==========================================

# Maximum file size for individual uploads (10MB)
app.file-upload.max-file-size=10485760

# Maximum number of files per request
app.file-upload.max-files-per-request=5

# Upload directory (relative to application root)
app.file-upload.upload-directory=uploads/

# Temporary directory for processing
app.file-upload.temp-directory=temp/

# Security settings
app.file-upload.enable-virus-scanning=false
app.file-upload.enable-watermark=true
app.file-upload.watermark-text=Iran ECommerce

# Image quality settings
app.file-upload.jpeg-quality=85
app.file-upload.enable-webp-conversion=true

# Allowed file types (MIME types)
app.file-upload.allowed-image-types=image/jpeg,image/jpg,image/png,image/gif,image/webp

# Allowed file extensions
app.file-upload.allowed-image-extensions=.jpg,.jpeg,.png,.gif,.webp

# Image size configurations
app.file-upload.image-sizes[0].name=thumbnail
app.file-upload.image-sizes[0].width=150
app.file-upload.image-sizes[0].height=150

app.file-upload.image-sizes[1].name=small
app.file-upload.image-sizes[1].width=300
app.file-upload.image-sizes[1].height=300

app.file-upload.image-sizes[2].name=medium
app.file-upload.image-sizes[2].width=600
app.file-upload.image-sizes[2].height=600

app.file-upload.image-sizes[3].name=large
app.file-upload.image-sizes[3].width=1200
app.file-upload.image-sizes[3].height=1200

# ==========================================
# SPRING BOOT MULTIPART CONFIGURATION
# ==========================================

# Enable multipart uploads
spring.servlet.multipart.enabled=true

# Maximum file size (should match or exceed app.file-upload.max-file-size)
spring.servlet.multipart.max-file-size=10MB

# Maximum request size (for multiple files)
spring.servlet.multipart.max-request-size=50MB

# Directory for temporary files
spring.servlet.multipart.location=${java.io.tmpdir}

# Threshold after which files are written to disk
spring.servlet.multipart.file-size-threshold=2KB

# ==========================================
# LOGGING CONFIGURATION
# ==========================================

# Enable detailed logging for file operations
logging.level.com.webrayan.store.core.service=DEBUG
logging.level.com.webrayan.store.core.validation=DEBUG
logging.level.com.webrayan.store.modules.ads.service.ImageService=DEBUG

# ==========================================
# SECURITY HEADERS
# ==========================================

# Security headers for file serving
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=true

# ==========================================
# PERFORMANCE TUNING
# ==========================================

# JVM options for image processing (add to startup parameters)
# -Djava.awt.headless=true
# -XX:+UseG1GC
# -XX:MaxGCPauseMillis=200

# ==========================================
# EXAMPLE YAML CONFIGURATION
# ==========================================

# If using application.yml instead of properties:
#
# app:
#   file-upload:
#     max-file-size: 10485760
#     max-files-per-request: 5
#     upload-directory: "uploads/"
#     temp-directory: "temp/"
#     enable-virus-scanning: false
#     enable-watermark: true
#     watermark-text: "Iran ECommerce"
#     jpeg-quality: 85
#     enable-webp-conversion: true
#     allowed-image-types:
#       - "image/jpeg"
#       - "image/jpg"
#       - "image/png"
#       - "image/gif"
#       - "image/webp"
#     allowed-image-extensions:
#       - ".jpg"
#       - ".jpeg"
#       - ".png"
#       - ".gif"
#       - ".webp"
#     image-sizes:
#       - name: "thumbnail"
#         width: 150
#         height: 150
#       - name: "small"
#         width: 300
#         height: 300
#       - name: "medium"
#         width: 600
#         height: 600
#       - name: "large"
#         width: 1200
#         height: 1200

# ==========================================
# PRODUCTION CONSIDERATIONS
# ==========================================

# For production deployments:
# 1. Set appropriate file size limits based on your needs
# 2. Configure cloud storage backends (AWS S3, Google Cloud Storage)
# 3. Enable virus scanning if handling user uploads
# 4. Set up CDN for image serving
# 5. Configure proper backup strategies
# 6. Monitor disk usage and implement cleanup policies
# 7. Use load balancers for high availability
# 8. Implement rate limiting for upload endpoints
