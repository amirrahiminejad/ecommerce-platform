{
  "info": {
    "name": "File Upload Management System",
    "description": "Comprehensive collection for testing file upload, image processing, and storage management APIs in Iran ECommerce. Includes image upload, processing, validation, and product gallery management.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "{{authToken}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Image Management",
      "item": [
        {
          "name": "Upload Single Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    pm.expect(pm.response.text()).to.include('uploaded successfully');",
                  "});",
                  "",
                  "// Store uploaded filename for other tests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.text();",
                  "    // Extract filename if present in response",
                  "    pm.globals.set('uploadedImageFilename', 'test-image.jpg');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Image file to upload (JPEG, PNG, GIF, WebP)"
                },
                {
                  "key": "adId",
                  "value": "123",
                  "type": "text",
                  "description": "Optional advertisement ID"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/images/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "upload"]
            },
            "description": "Upload a single image with automatic resizing and optimization. Supports JPEG, PNG, GIF, and WebP formats up to 10MB."
          }
        },
        {
          "name": "Upload Multiple Images",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Multiple files uploaded successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('uploaded successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "First image file"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Second image file"
                },
                {
                  "key": "adId",
                  "value": "456",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/images/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "upload"]
            },
            "description": "Upload multiple images in a single request (max 5 files per request)."
          }
        },
        {
          "name": "View Image - Original Size",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is binary image data', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/view?size=original&filename={{uploadedImageFilename}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "view"],
              "query": [
                {
                  "key": "size",
                  "value": "original",
                  "description": "Image size: original, 150x150, 300x300, 600x600"
                },
                {
                  "key": "filename",
                  "value": "{{uploadedImageFilename}}",
                  "description": "Filename of the image"
                }
              ]
            },
            "description": "Retrieve the original size of an uploaded image."
          }
        },
        {
          "name": "View Image - Thumbnail",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/view?size=150x150&filename={{uploadedImageFilename}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "view"],
              "query": [
                {
                  "key": "size",
                  "value": "150x150"
                },
                {
                  "key": "filename",
                  "value": "{{uploadedImageFilename}}"
                }
              ]
            },
            "description": "Retrieve a thumbnail version (150x150) of an uploaded image."
          }
        },
        {
          "name": "View Image - Medium Size",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/view?size=600x600&filename={{uploadedImageFilename}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "view"],
              "query": [
                {
                  "key": "size",
                  "value": "600x600"
                },
                {
                  "key": "filename",
                  "value": "{{uploadedImageFilename}}"
                }
              ]
            },
            "description": "Retrieve a medium size version (600x600) of an uploaded image."
          }
        },
        {
          "name": "List Images by Advertisement",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Images have required properties', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('filename');",
                  "        pm.expect(jsonData[0]).to.have.property('uploadDate');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/ad/123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "ad", "123"]
            },
            "description": "Get all images associated with a specific advertisement."
          }
        },
        {
          "name": "Delete Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delete confirmation message', function () {",
                  "    pm.expect(pm.response.text()).to.include('deleted successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/delete?filename={{uploadedImageFilename}}&adId=123",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "delete"],
              "query": [
                {
                  "key": "filename",
                  "value": "{{uploadedImageFilename}}",
                  "description": "Filename of image to delete"
                },
                {
                  "key": "adId",
                  "value": "123",
                  "description": "Optional advertisement ID"
                }
              ]
            },
            "description": "Delete an image and all its resized versions."
          }
        }
      ],
      "description": "Basic image management operations including upload, view, and delete."
    },
    {
      "name": "Product Image Gallery",
      "item": [
        {
          "name": "Upload Product Images",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product images uploaded successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uploadedImages');",
                  "    pm.expect(jsonData.uploadedImages).to.be.an('array');",
                  "});",
                  "",
                  "// Store first image ID for other tests",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.uploadedImages && jsonData.uploadedImages.length > 0) {",
                  "        pm.globals.set('productImageId', jsonData.uploadedImages[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [],
                  "description": "Product image 1"
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": [],
                  "description": "Product image 2"
                },
                {
                  "key": "files",
                  "type": "file",
                  "src": [],
                  "description": "Product image 3"
                },
                {
                  "key": "setPrimaryAutomatically",
                  "value": "true",
                  "type": "text",
                  "description": "Set first image as primary"
                },
                {
                  "key": "enableWatermark",
                  "value": "true",
                  "type": "text",
                  "description": "Apply watermark to images"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/456/images",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "456", "images"]
            },
            "description": "Upload multiple images for a product with automatic gallery management."
          }
        },
        {
          "name": "Get Product Image Gallery",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Gallery has primary image', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('primaryImage');",
                  "});",
                  "",
                  "pm.test('Gallery has additional images', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('additionalImages');",
                  "    pm.expect(jsonData.additionalImages).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/456/images",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "456", "images"]
            },
            "description": "Retrieve the complete image gallery for a product including primary and additional images."
          }
        },
        {
          "name": "Set Primary Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Primary image set successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('primary image set');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"imageId\": {{productImageId}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/456/images/primary",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "456", "images", "primary"]
            },
            "description": "Set a specific image as the primary image for the product."
          }
        },
        {
          "name": "Reorder Product Images",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Images reordered successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('reordered successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"imageIds\": [789, 790, 791]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/456/images/reorder",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "456", "images", "reorder"]
            },
            "description": "Reorder product images by providing array of image IDs in desired order."
          }
        },
        {
          "name": "Get Product Image by Size",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/images/{{productImageId}}/size/medium",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "images", "{{productImageId}}", "size", "medium"]
            },
            "description": "Get a specific size variant of a product image."
          }
        },
        {
          "name": "Delete Product Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Image deleted successfully', function () {",
                  "    pm.expect(pm.response.text()).to.include('deleted successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/456/images/{{productImageId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "456", "images", "{{productImageId}}"]
            },
            "description": "Delete a specific product image and all its variants."
          }
        }
      ],
      "description": "Product image gallery management including upload, organization, and deletion."
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Upload Invalid File Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message about file type', function () {",
                  "    pm.expect(pm.response.text()).to.include('file type');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Upload a .txt file or other unsupported format"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/images/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "upload"]
            },
            "description": "Test uploading an unsupported file type to verify validation."
          }
        },
        {
          "name": "Upload File Too Large",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 413', function () {",
                  "    pm.response.to.have.status(413);",
                  "});",
                  "",
                  "pm.test('Error message about file size', function () {",
                  "    pm.expect(pm.response.text()).to.include('file size');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Upload a file larger than 10MB"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/images/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "upload"]
            },
            "description": "Test uploading a file that exceeds the size limit."
          }
        },
        {
          "name": "View Non-existent Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message about file not found', function () {",
                  "    pm.expect(pm.response.text()).to.include('not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/view?size=original&filename=non-existent-file.jpg",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "view"],
              "query": [
                {
                  "key": "size",
                  "value": "original"
                },
                {
                  "key": "filename",
                  "value": "non-existent-file.jpg"
                }
              ]
            },
            "description": "Test viewing a non-existent image file."
          }
        },
        {
          "name": "Invalid Image Size Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message about invalid size', function () {",
                  "    pm.expect(pm.response.text()).to.include('size');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/images/view?size=invalid-size&filename={{uploadedImageFilename}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "view"],
              "query": [
                {
                  "key": "size",
                  "value": "invalid-size"
                },
                {
                  "key": "filename",
                  "value": "{{uploadedImageFilename}}"
                }
              ]
            },
            "description": "Test using an invalid size parameter."
          }
        }
      ],
      "description": "Test error scenarios and validation to ensure proper error handling."
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Batch Upload Performance",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Record start time",
                  "pm.globals.set('startTime', Date.now());"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Calculate processing time",
                  "const startTime = pm.globals.get('startTime');",
                  "const endTime = Date.now();",
                  "const processingTime = endTime - startTime;",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Processing time is acceptable', function () {",
                  "    pm.expect(processingTime).to.be.below(30000); // 30 seconds",
                  "});",
                  "",
                  "console.log('Batch upload processing time: ' + processingTime + 'ms');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Large image file 1"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Large image file 2"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Large image file 3"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Large image file 4"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Large image file 5"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/images/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "images", "upload"]
            },
            "description": "Test batch upload performance with multiple large images."
          }
        }
      ],
      "description": "Performance testing for file upload operations."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "if (!pm.globals.has('baseUrl')) {",
          "    pm.globals.set('baseUrl', 'http://localhost:8080');",
          "}",
          "",
          "// Auto-login if no token exists",
          "if (!pm.globals.has('authToken') || !pm.globals.get('authToken')) {",
          "    console.log('No auth token found. Please run authentication first.');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000); // 10 seconds",
          "});",
          "",
          "// Handle authentication errors",
          "if (pm.response.code === 401) {",
          "    console.log('Authentication required. Please obtain a valid token.');",
          "}"
        ]
      }
    }
  ]
}
