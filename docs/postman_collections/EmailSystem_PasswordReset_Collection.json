{
	"info": {
		"_postman_id": "email-system-collection-uuid",
		"name": "📧 Iran ECommerce Email System & Password Reset API",
		"description": "Complete collection for testing Email System and Password Reset functionality\n\n## Features Covered:\n- 🔐 Password Reset Request\n- ✅ Token Validation\n- 🔄 Password Reset\n- 📧 Email System Testing\n\n## Base URL:\n`{{base_url}}` = http://localhost:8005\n\n## How to Use:\n1. Set environment variable `base_url`\n2. Run requests in order\n3. Copy tokens from responses for testing\n\n**Last Updated**: October 2025",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "🔐 Password Reset",
			"item": [
				{
					"name": "1. Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"pm.test(\"Success is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('ارسال');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin@iran-bazaar.com",
									"description": "User's email address for password reset",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/request",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"request"
							]
						},
						"description": "🔐 **Request Password Reset**\n\nSends a password reset email to the user's email address.\n\n### Parameters:\n- `email`: User's email address (required)\n\n### Expected Response:\n```json\n{\n  \"success\": true,\n  \"message\": \"لینک بازیابی رمز عبور به ایمیل شما ارسال شد.\"\n}\n```\n\n### Error Cases:\n- Invalid email format\n- Rate limit exceeded (3 attempts per hour)\n- Account not active\n\n### Security Features:\n- Rate limiting\n- No information disclosure\n- Secure token generation"
					},
					"response": []
				},
				{
					"name": "2. Validate Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"pm.test(\"Response has valid property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('valid');",
									"});",
									"",
									"// Store token validity for next request",
									"pm.test(\"Store token validity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token_valid\", jsonData.valid);",
									"    ",
									"    if (jsonData.valid && jsonData.user) {",
									"        pm.environment.set(\"user_email\", jsonData.user.email);",
									"        pm.environment.set(\"user_name\", jsonData.user.firstName + ' ' + jsonData.user.lastName);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/validate?token={{reset_token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"validate"
							],
							"query": [
								{
									"key": "token",
									"value": "{{reset_token}}",
									"description": "Reset token to validate (get from email or previous response)"
								}
							]
						},
						"description": "✅ **Validate Reset Token**\n\nChecks if a password reset token is valid and not expired.\n\n### Parameters:\n- `token`: Reset token (required) - Get from email or set in environment\n\n### Expected Response (Valid Token):\n```json\n{\n  \"success\": true,\n  \"valid\": true,\n  \"message\": \"توکن معتبر است\",\n  \"user\": {\n    \"firstName\": \"علی\",\n    \"lastName\": \"احمدی\",\n    \"email\": \"ali@example.com\"\n  }\n}\n```\n\n### Expected Response (Invalid Token):\n```json\n{\n  \"success\": true,\n  \"valid\": false,\n  \"message\": \"توکن نامعتبر یا منقضی شده\"\n}\n```\n\n### Token Validity:\n- 15-minute expiration\n- One-time use\n- 256-bit secure generation\n\n**Note**: Set `reset_token` environment variable with actual token from email"
					},
					"response": []
				},
				{
					"name": "3. Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect([200, 400]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Response has success property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Password reset successful\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.message).to.include('موفقیت');",
									"    });",
									"} else {",
									"    pm.test(\"Password reset failed with reason\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.false;",
									"        console.log(\"Reset failed:\", jsonData.message);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{reset_token}}",
									"description": "Reset token from email",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "newPassword123",
									"description": "New password (min 6 characters)",
									"type": "text"
								},
								{
									"key": "confirmPassword",
									"value": "newPassword123",
									"description": "Confirm new password (must match)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/reset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"reset"
							]
						},
						"description": "🔄 **Reset Password**\n\nSets a new password using a valid reset token.\n\n### Parameters:\n- `token`: Valid reset token (required)\n- `newPassword`: New password (required, min 6 chars)\n- `confirmPassword`: Password confirmation (required, must match)\n\n### Expected Response (Success):\n```json\n{\n  \"success\": true,\n  \"message\": \"رمز عبور شما با موفقیت تغییر کرد.\"\n}\n```\n\n### Error Responses:\n```json\n// Password mismatch\n{\n  \"success\": false,\n  \"message\": \"رمز عبور و تکرار آن یکسان نیست\"\n}\n\n// Invalid token\n{\n  \"success\": false,\n  \"message\": \"لینک بازیابی رمز عبور نامعتبر یا منقضی شده است.\"\n}\n```\n\n### Security Features:\n- Token validation\n- Password strength validation\n- One-time token usage\n- Confirmation email sent\n\n**Note**: After successful reset, the token becomes invalid"
					},
					"response": []
				}
			],
			"description": "🔐 **Password Reset Flow**\n\nComplete workflow for password reset functionality:\n\n1. **Request Reset**: Send email with reset link\n2. **Validate Token**: Check if token is valid\n3. **Reset Password**: Set new password\n\n### Security Features:\n- Rate limiting (3 attempts/hour)\n- 15-minute token expiration\n- One-time use tokens\n- Strong password validation\n- Email notifications\n\n### Testing Flow:\n1. Run \"Request Password Reset\"\n2. Check email for reset token\n3. Set `reset_token` environment variable\n4. Run \"Validate Reset Token\"\n5. Run \"Reset Password\"\n6. Test login with new password"
		},
		{
			"name": "🧪 Test Scenarios",
			"item": [
				{
					"name": "Test Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response indicates failure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "invalid-email-format",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/request",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"request"
							]
						},
						"description": "🔍 **Test Invalid Email Format**\n\nTests validation for invalid email formats.\n\nExpected: 400 Bad Request with validation error"
					},
					"response": []
				},
				{
					"name": "Test Empty Token Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation error for empty token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/validate?token=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"validate"
							],
							"query": [
								{
									"key": "token",
									"value": ""
								}
							]
						},
						"description": "🔍 **Test Empty Token**\n\nTests validation for empty token parameter.\n\nExpected: 400 Bad Request"
					},
					"response": []
				},
				{
					"name": "Test Password Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Password mismatch error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('یکسان نیست');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "test-token",
									"type": "text"
								},
								{
									"key": "newPassword",
									"value": "password123",
									"type": "text"
								},
								{
									"key": "confirmPassword",
									"value": "different123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/auth/password-reset/reset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"password-reset",
								"reset"
							]
						},
						"description": "🔍 **Test Password Mismatch**\n\nTests validation when passwords don't match.\n\nExpected: 400 Bad Request with mismatch error"
					},
					"response": []
				}
			],
			"description": "🧪 **Test Scenarios**\n\nCollection of test cases for edge cases and error conditions:\n\n- Invalid email formats\n- Empty/missing parameters\n- Password validation errors\n- Token expiration\n- Rate limiting\n\nUse these to ensure proper error handling and validation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default base URL if not set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8005');",
					"}",
					"",
					"// Log current environment",
					"console.log('Base URL:', pm.environment.get('base_url'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test to check content type",
					"pm.test('Content-Type is JSON', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8005",
			"type": "string"
		},
		{
			"key": "reset_token",
			"value": "",
			"type": "string",
			"description": "Set this with actual token from email"
		}
	]
}
